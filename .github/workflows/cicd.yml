name: Deploy Ingestion Pipeline

on:
  push:
    branches:
      - "staging"
  pull_request:
    branches:
      - "staging"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ingestion-staging
  BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# permissions:
#   contents: read

jobs:
  # ci:
  #   name: Test code and push images to ECR
  #   runs-on: ubuntu-latest
  #   environment: staging

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: 3.8

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt

  #   - name: Run tests
  #     env:
  #       AWS_REGION: sa-east-1
  #     run: |
  #       make tests


  push_images:
    name: Push images to ECR
    runs-on: ubuntu-latest
    environment: main

    steps:
    # - name: Checkout
    #   uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: gettingtweets
      run: |
        echo $(ls)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f fed-by-tweets-batch-ingestion/lambda-functions/getting-tweets-function/integration-tests/dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"